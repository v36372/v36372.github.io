<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on random typing</title>
    <link>https://v36372.github.io/code/index.xml</link>
    <description>Recent content in Code on random typing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 28 Dec 2016 23:16:29 +0700</lastBuildDate>
    <atom:link href="https://v36372.github.io/code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The best Golang web framework for you</title>
      <link>https://v36372.github.io/code/the-best-golang-web-framework-for-you/</link>
      <pubDate>Wed, 28 Dec 2016 23:16:29 +0700</pubDate>
      
      <guid>https://v36372.github.io/code/the-best-golang-web-framework-for-you/</guid>
      <description>

&lt;h1 id=&#34;don-t-use-framework&#34;&gt;Don&amp;rsquo;t use framework&lt;/h1&gt;

&lt;p&gt;The standard library has everything you need.&lt;/p&gt;

&lt;p&gt;The power of Go doesn&amp;rsquo;t lie in concurrency like you may imagine. But instead in the design of &lt;code&gt;interfaces&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Say in Go, you have a function that accepts an interface as a parameter. And you have another &lt;code&gt;struct&lt;/code&gt; that implement every method of that interface. Then this struct is acceptable for the function.&lt;/p&gt;

&lt;p&gt;To a larger scope, every struct that implement all the methods of that interface is eligible for the function.&lt;/p&gt;

&lt;p&gt;Now imagine this. You&amp;rsquo;re developing a web application in Golang, and the router is getting slower (for example), and you want to replace the it by something faster than the standard library one.&lt;/p&gt;

&lt;p&gt;This would be problematic if you use a web framework cause everything would be glued in 1 piece. On the other hand, you can just find a router implementation on Github and plug it in seamlessly. Because the opensource router was implemented to conform to the standard library &lt;code&gt;router&lt;/code&gt; interface, so that your program would accept it with no problem at all.&lt;/p&gt;

&lt;p&gt;You can read up more about interfaces at &lt;a href=&#34;http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go&#34;&gt;http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>